<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Railscasts | Baozi Wu]]></title>
  <link href="http://blog.baozi-wu.com/categories/railscasts/atom.xml" rel="self"/>
  <link href="http://blog.baozi-wu.com/"/>
  <updated>2014-08-24T23:04:10+08:00</updated>
  <id>http://blog.baozi-wu.com/</id>
  <author>
    <name><![CDATA[Baozi Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nested Form With Rails 4.1]]></title>
    <link href="http://blog.baozi-wu.com/2014/08/18/nested-form-with-rails-4-dot-1/"/>
    <updated>2014-08-18T16:50:01+08:00</updated>
    <id>http://blog.baozi-wu.com/2014/08/18/nested-form-with-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Recently I got a <a href="http://us5.campaign-archive2.com/?u=0d868b8bb90703d75a27d8b42&amp;id=055f149177&amp;e=eea34cb3a8">guide</a> of telling us how to be self-taught from on-line courses. It shows me how important taking note is. I highly recommended this guide to who also wants to be self-taught.</p>

<blockquote><p>The average person forgets 40% of what they learn within 20 minutes.</p></blockquote>

<p>So I decide to take notes here since now. It will spend most of my time to do, but if I do not do it today, I know I won&rsquo;t do it anymore. That is my lazy personality. The first technical post I am going to present my reviews of <a href="http://railscasts.com/episodes/196-nested-model-form-revised">#196 Nested Model Form (revised)</a>; meanwhile, some of the codes there are not working because of the version of Rails, so I will try to make it work like video shows with the latest Rails, please revise my code if you have better ways, thanks a bunch. OK so let us get started.</p>

<p>Like <a href="http://railscasts.com/episodes/196-nested-model-form-revised">#196 Nested Model Form (revised)</a> said, there are three separate models and already had associations with each other:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  has_many :questions
end
</code></pre>

<pre><code class="ruby app/models/question.rb">class Question &lt; ActiveRecord::Base
  belongs_to :survey
  has_many :answers
end
</code></pre>

<pre><code class="ruby app/models/answer.rb">class Answer &lt; ActiveRecord::Base
  belongs_to :question
end
</code></pre>

<p>Here is the schema:</p>

<pre><code class="ruby db/schema.rb">ActiveRecord::Schema.define(version: 20140817155213) do

  create_table "answers", force: true do |t|
    t.text     "content"
    t.integer  "question_id"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "questions", force: true do |t|
    t.text     "content"
    t.integer  "survey_id"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "surveys", force: true do |t|
    t.string   "name"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

end
</code></pre>

<h2>The Purpose</h2>

<p>All we want is to manage them in a single form. In order to implement this, we have to call <code>accepts_nested_attributes_for</code> method in our model:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :questions
end
</code></pre>

<p>So that we can add <code>fields_for</code> to <code>Question</code> model in the form:</p>

<p>&#8220;` html app/views/surveys/_form.html.erb
&hellip;
&hellip;
&hellip;</p>

<div class="field">
  <%= f.label :name %><br>
  <%= f.text_field :name %>
</div>


<p>&lt;%= f.fields_for :questions do |builder| %>
  <fieldset>
  &lt;%= builder.label :content, &lsquo;Question&rsquo; %><br>
  &lt;%= builder.text_area :content %><br>
  </fieldset>
&lt;% end %>
&hellip;
&hellip;
&hellip;</p>

<pre><code>
Remember to add plural name of associated model (Followed by `_attributes`) to `Strong Parameter` from `SurveysController`:
</code></pre>

<p>&hellip;
&hellip;
&hellip;
private
  &hellip;
  &hellip;
  &hellip;</p>

<p>  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params.require(:survey).permit(:name, questions_attributes: [:id, :content])
  end
&#8220;`</p>

<h2>Removing Questions</h2>

<p>Next we are going to implement removing questions feature. We will create a checkbox whose key is <code>_destroy</code>, so the question will be removed if checkbox is checked.</p>

<p>&#8220;` html app/views/surveys/_form.html.erb
&hellip;
&hellip;
&hellip;</p>

<div class="field">
  <%= f.label :name %><br>
  <%= f.text_field :name %>
</div>


<p>&lt;%= f.fields_for :questions do |question| %>
  <fieldset>
  &lt;%= question.label :content, &lsquo;Question&rsquo; %><br>
  &lt;%= question.text_area :content %><br>
  &lt;%= question.check_box :<em>destroy %>
  &lt;%= question.label :</em>destroy, &lsquo;Remove question&rsquo; %>
  </fieldset>
&lt;% end %>
<code>``
Add</code>allow_destroy<code>option to</code>Survey` model, set the value to be true:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :questions, allow_destroy: true
end
</code></pre>

<p>We also need to add <code>_destroy</code> to <code>questions_attributes</code> like before:</p>

<pre><code class="ruby app/controllers/surveys_controller.rb">...
...
...
private
  ...
  ...
  ...

  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params.require(:survey).permit(:name, questions_attributes: [:id, :content, :_destroy])
  end
</code></pre>

<p>Finally we can delete the questions through checking the checkboxes.</p>

<h2>Editing Answers</h2>

<p>Now, we also want to edit each question&rsquo;s answers.</p>

<p>Just like before, we can call <code>accepts_nested_attributes_for</code> method to its associated model -  <code>Question</code>:</p>

<pre><code class="ruby app/models/question.rb">class Question &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :answers, allow_destroy: true
end
</code></pre>

<p>Remember again, insert the plural name of associated model, <code>Question</code> model in the strong parameter. Let&rsquo;s see how to do it:</p>

<pre><code class="ruby app/controllers/surveys_controller.rb">...
...
...
private
  ...
  ...
  ...

  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params ... questions_attributes: [:id, :content, :_destroy, answers_attributes: [:id, :content, :_destroy]])
  end
</code></pre>

<p>Next, add fields for <code>Answer</code>:</p>

<pre><code class="html app/views/surveys/_form.html.erb">...
...
&lt;%= f.fields_for :questions do |question| %&gt;
  &lt;fieldset&gt;
  &lt;%= question.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= question.text_area :content %&gt;&lt;br&gt;
  &lt;%= question.check_box :_destroy %&gt;
  &lt;%= question.label :_destroy, 'Remove question' %&gt;
  &lt;%= question.fields_for :answers do |answer| %&gt;
    &lt;%= answer.label :content, 'Answer' %&gt;&lt;br&gt;
    &lt;%= answer.text_field :content %&gt;&lt;br&gt;
  &lt;% end %&gt;
  &lt;/fieldset&gt;
&lt;% end %&gt;
...
...
</code></pre>

<p>Then <code>Answer</code> model can be managed by the form.</p>

<p>But it it better that we can make our form more neat, we will use <code>render</code> method to do it.</p>

<pre><code class="html app/views/surveys/_form.html.erb">...
...
&lt;%= f.fields_for :questions do |question| %&gt;
  &lt;%= render 'question_fields', f: question %&gt;
&lt;% end %&gt;
...
...
</code></pre>

<p>And create <code>_question_fields.html.erb</code> file into <code>app/views/surveys</code> folder:</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove question' %&gt;
  &lt;%= f.fields_for :answers do |answer| %&gt;
    &lt;%= answer.label :content, 'Answer' %&gt;&lt;br&gt;
    &lt;%= answer.text_field :content %&gt;&lt;br&gt;
  &lt;% end %&gt;
&lt;/fieldset&gt;
</code></pre>

<p><code>render</code> each question&rsquo;s answers:</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove question' %&gt;
  &lt;%= f.fields_for :answers do |answer| %&gt;
    &lt;%= render 'answer_fields', f: answer %&gt;
  &lt;% end %&gt;
&lt;/fieldset&gt;
</code></pre>

<p>create <code>_answer_fields.html.erb</code> into <code>app/views/surveys</code> folder:</p>

<pre><code class="html app/views/surveys/_answer_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Answer' %&gt;
  &lt;%= f.text_field :content %&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove' %&gt;
&lt;/fieldset&gt;
</code></pre>

<h2>Editing Questions and Answers through JavaScript</h2>

<p>This step we want to use links to remove questions and answers insted of checkboxes. Here are some steps for this action beforing coding:</p>

<ol>
<li>Click <code>Remove</code> link.</li>
<li>Hide the <code>Question</code> or <code>Answer</code> fields.</li>
<li>Datas will be updated after submitting.</li>
</ol>


<p>Firstly, remove <code>checkbox</code> and <code>label</code> which has <code>_destroy</code> attribute. Add a <code>input</code> for <code>_destroy</code> and a link which has <code>remove_fields</code> class.</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.hidden_field :_destroy %&gt;
  &lt;%= link_to 'Remove', '#', class: 'remove_fields' %&gt;
  &lt;%= f.fields_for :answers do |builder| %&gt;
    &lt;%= render 'answer_fields', f: builder %&gt;
  &lt;% end %&gt;
&lt;/fieldset&gt;
</code></pre>

<p>So the <code>&lt;%= f.hidden_field :_destroy %&gt;</code> will generate <code>&lt;input id="..." name="..." type="hidden" value="false"&gt;</code> for us.</p>

<p>And having coffee, when we click links with <code>.remove_fields</code> class, it is triggered these event:</p>

<pre><code class="coffee app/assets/javascripts/custom.js.coffee">$(document).on 'click', '.remove_fields', (event) -&gt;
  $(this).prev('input[type="hidden"]').val(true)
  $(this).closest('fieldset').hide()
  event.preventDefault()
</code></pre>

<p>They means:</p>

<ol>
<li>Select previous elements of <code>.remove_fields</code>. The filter is <code>type="hidden"</code>, and set its value to be <code>true</code>.</li>
<li>Then hide the fieldset element which is closest to <code>.remove_fields</code>.</li>
</ol>


<p>Do the same thing to <code>Answer</code> fields:</p>

<pre><code class="html app/views/surveys/_answer_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Answer' %&gt;
  &lt;%= f.text_field :content %&gt;
  &lt;%= f.hidden_field :_destroy %&gt;
  &lt;%= link_to 'Remove', '#', class: 'remove_fields' %&gt;
&lt;/fieldset&gt;
</code></pre>

<p>Then we can remove fields by links.</p>

<p>Next, add helper <code>link_to_add_fields</code>, we will make it.</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.hidden_field :_destroy %&gt;
  &lt;%= link_to 'Remove', '#', class: 'remove_fields' %&gt;
  &lt;%= f.fields_for :answers do |builder| %&gt;
    &lt;%= render 'answer_fields', f: builder %&gt;
  &lt;% end %&gt;
  &lt;%= link_to_add_fields 'Add Answer', f, :answers %&gt;
&lt;/fieldset&gt;
</code></pre>

<p>Here are it look like:</p>

<pre><code class="ruby app/helpers/application_helper.rb">module ApplicationHelper
  def link_to_add_fields(name, form, association)
    new_object = form.object.send(association).klass.new
    id = new_object.object_id
    fields = form.fields_for(association, new_object, child_index: id) do |builder|
      # render partial
      render(association.to_s.singularize + "_fields", f: builder)
    end
    link_to(name, '#', class: 'add_fields', data: { id: id, fields: fields.gsub("\n", "") })
  end
end
</code></pre>

<p>We get <code>Question</code> instance from <code>form.object</code>, sending association to it and call <code>klass</code>, we get <code>Answer</code> class, then call <code>new</code> method. Next, we fetch its object id in order to make its field.</p>

<p>After create fields we make a link which has <code>data-id</code> and <code>data-fields</code> attributes. So that we can retrieve fields before <code>.add_fields</code>.</p>

<pre><code class="coffee app/assets/javascripts/custom.js.coffee">$(document).on 'click', '.add_fields', (event) -&gt;
  time = new Date().getTime()
  regexp = new RegExp($(this).data('id'), 'g')
  $(this).before($(this).data('fields').replace(regexp, time))
  event.preventDefault()
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://railscasts.com/episodes/196-nested-model-form-revised?view=comments">Screencast&rsquo;s comments</a></li>
<li><a href="http://railscasts.com/episodes/390-turbolinks?view=asciicast">#390 Turbolinks</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
