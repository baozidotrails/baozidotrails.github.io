<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Baozi Wu]]></title>
  <link href="http://blog.baozi-wu.com/categories/tips/atom.xml" rel="self"/>
  <link href="http://blog.baozi-wu.com/"/>
  <updated>2014-08-20T22:11:11+08:00</updated>
  <id>http://blog.baozi-wu.com/</id>
  <author>
    <name><![CDATA[Baozi Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nested Form With Rails 4.1]]></title>
    <link href="http://blog.baozi-wu.com/2014/08/18/nested-form-with-rails-4-dot-1/"/>
    <updated>2014-08-18T16:50:01+08:00</updated>
    <id>http://blog.baozi-wu.com/2014/08/18/nested-form-with-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>Recently I got a <a href="http://us5.campaign-archive2.com/?u=0d868b8bb90703d75a27d8b42&amp;id=055f149177&amp;e=eea34cb3a8">guide</a> of telling us how to be self-taught from on-line courses. It shows me how important taking note is. I highly recommended this guide to who also wants to be self-taught.</p>

<blockquote><p>The average person forgets 40% of what they learn within 20 minutes.</p></blockquote>

<p>So I decide to take notes here since now. It will spend most of my time to do, but if I do not do it today, I know I won&rsquo;t do it anymore. That is my lazy personality. The first technical post I am going to present my reviews of <a href="http://railscasts.com/episodes/196-nested-model-form-revised">#196 Nested Model Form (revised)</a>; meanwhile, some of the codes there are not working because of the version of Rails, so I will try to make it work like video shows with the latest Rails, please revise my code if you have better ways, thanks a bunch. OK so let us get started.</p>

<p>Like <a href="http://railscasts.com/episodes/196-nested-model-form-revised">#196 Nested Model Form (revised)</a> said, there are three separate models and already had associations with each other:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  has_many :questions
end
</code></pre>

<pre><code class="ruby app/models/question.rb">class Question &lt; ActiveRecord::Base
  belongs_to :survey
  has_many :answers
end
</code></pre>

<pre><code class="ruby app/models/answer.rb">class Answer &lt; ActiveRecord::Base
  belongs_to :question
end
</code></pre>

<p>Here is the schema:</p>

<pre><code class="ruby db/schema.rb">ActiveRecord::Schema.define(version: 20140817155213) do

  create_table "answers", force: true do |t|
    t.text     "content"
    t.integer  "question_id"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "questions", force: true do |t|
    t.text     "content"
    t.integer  "survey_id"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "surveys", force: true do |t|
    t.string   "name"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

end
</code></pre>

<h2>The Purpose</h2>

<p>All we want is to manage them in a single form. In order to implement this, we have to call <code>accepts_nested_attributes_for</code> method in our model:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :questions
end
</code></pre>

<p>So that we can add <code>fields_for</code> to <code>Question</code> model in the form:</p>

<p>&#8220;` html app/views/surveys/_form.html.erb
&hellip;
&hellip;
&hellip;</p>

<div class="field">
  <%= f.label :name %><br>
  <%= f.text_field :name %>
</div>


<p>&lt;%= f.fields_for :questions do |builder| %>
  <fieldset>
  &lt;%= builder.label :content, &lsquo;Question&rsquo; %><br>
  &lt;%= builder.text_area :content %><br>
  </fieldset>
&lt;% end %>
&hellip;
&hellip;
&hellip;</p>

<pre><code>
Remember to add plural name of associated model (Followed by `_attributes`) to `Strong Parameter` from `SurveysController`:
</code></pre>

<p>&hellip;
&hellip;
&hellip;
private
  &hellip;
  &hellip;
  &hellip;</p>

<p>  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params.require(:survey).permit(:name, questions_attributes: [:id, :content])
  end
&#8220;`</p>

<h2>Removing Questions</h2>

<p>Next we are going to implement removing questions feature. We will create a checkbox which its key is <code>_destroy</code>, so the question will be removed if checkbox is checked.</p>

<p>&#8220;` html app/views/surveys/_form.html.erb
&hellip;
&hellip;
&hellip;</p>

<div class="field">
  <%= f.label :name %><br>
  <%= f.text_field :name %>
</div>


<p>&lt;%= f.fields_for :questions do |question| %>
  <fieldset>
  &lt;%= question.label :content, &lsquo;Question&rsquo; %><br>
  &lt;%= question.text_area :content %><br>
  &lt;%= question.check_box :<em>destroy %>
  &lt;%= question.label :</em>destroy, &lsquo;Remove question&rsquo; %>
  </fieldset>
&lt;% end %>
<code>``
Add</code>allow_destroy<code>option to</code>Survey` model, set the value to be true:</p>

<pre><code class="ruby app/models/survey.rb">class Survey &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :questions, allow_destroy: true
end
</code></pre>

<p>We also need to add <code>_destroy</code> to <code>questions_attributes</code> (Strong Parameter)</p>

<pre><code class="ruby app/controllers/surveys_controller.rb">...
...
...
private
  ...
  ...
  ...

  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params.require(:survey).permit(:name, questions_attributes: [:id, :content, :_destroy])
  end
</code></pre>

<p>Finally we can delete the questions through checking the checkboxes.</p>

<h2>Editing Answers</h2>

<p>Now, we also want to edit each question&rsquo;s answers.</p>

<p>Just like before, we can call <code>accepts_nested_attributes_for</code> method to its associated model -  <code>Question</code>:</p>

<pre><code class="ruby app/models/question.rb">class Question &lt; ActiveRecord::Base
  ...
  accepts_nested_attributes_for :answers, allow_destroy: true
end
</code></pre>

<p>Remember again, insert the plural name of associated model, <code>Question</code> model in the strong parameter. Let&rsquo;s see how to do it:</p>

<pre><code class="ruby app/controllers/surveys_controller.rb">...
...
...
private
  ...
  ...
  ...

  # Never trust parameters from the scary internet, only allow the white list through.
  def survey_params
    params ... questions_attributes: [:id, :content, :_destroy, answers_attributes: [:id, :content, :_destroy]])
  end
</code></pre>

<p>Next, add fields for <code>Answer</code>:</p>

<pre><code class="html app/views/surveys/_form.html.erb">...
...
&lt;%= f.fields_for :questions do |question| %&gt;
  &lt;fieldset&gt;
  &lt;%= question.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= question.text_area :content %&gt;&lt;br&gt;
  &lt;%= question.check_box :_destroy %&gt;
  &lt;%= question.label :_destroy, 'Remove question' %&gt;
  &lt;%= question.fields_for :answers do |answer| %&gt;
    &lt;%= answer.label :content, 'Answer' %&gt;&lt;br&gt;
    &lt;%= answer.text_field :content %&gt;&lt;br&gt;
  &lt;% end %&gt;
  &lt;/fieldset&gt;
&lt;% end %&gt;
...
...
</code></pre>

<p>Then <code>Answer</code> model can be managed by the form.</p>

<p>But it it better that we can make our form more neat, we will use <code>render</code> method to do it.</p>

<pre><code class="html app/views/surveys/_form.html.erb">...
...
&lt;%= f.fields_for :questions do |question| %&gt;
  &lt;%= render 'question_fields', f: question %&gt;
&lt;% end %&gt;
...
...
</code></pre>

<p>And create <code>_question_fields.html.erb</code> file into <code>app/views/surveys</code> folder:</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove question' %&gt;
  &lt;%= f.fields_for :answers do |answer| %&gt;
    &lt;%= answer.label :content, 'Answer' %&gt;&lt;br&gt;
    &lt;%= answer.text_field :content %&gt;&lt;br&gt;
  &lt;% end %&gt;
&lt;/fieldset&gt;
</code></pre>

<p><code>render</code> each question&rsquo;s answers:</p>

<pre><code class="html app/views/surveys/_question_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Question' %&gt;&lt;br&gt;
  &lt;%= f.text_area :content %&gt;&lt;br&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove question' %&gt;
  &lt;%= f.fields_for :answers do |answer| %&gt;
    &lt;%= render 'answer_fields', f: answer %&gt;
  &lt;% end %&gt;
&lt;/fieldset&gt;
</code></pre>

<p>create <code>_answer_fields.html.erb</code> into <code>app/views/surveys</code> folder:</p>

<pre><code class="html app/views/surveys/_answer_fields.html.erb">&lt;fieldset&gt;
  &lt;%= f.label :content, 'Answer' %&gt;
  &lt;%= f.text_field :content %&gt;
  &lt;%= f.check_box :_destroy %&gt;
  &lt;%= f.label :_destroy, 'Remove' %&gt;
&lt;/fieldset&gt;
</code></pre>

<h2>TODO: Editing Questions and Answers through JavaScript</h2>
]]></content>
  </entry>
  
</feed>
